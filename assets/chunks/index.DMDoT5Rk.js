const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunks/Chart.DKtxStBt.js","assets/chunks/framework.Z8yrkugl.js"])))=>i.map(i=>d[i]);
import{u as a,o as s,b as i,k as n,U as r,V as c}from"./framework.Z8yrkugl.js";const t=JSON.parse(`{"css":".button-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  align-items: center;\\n  gap: 8px;\\n  margin-top: 10px;\\n  padding: 10px 22px;\\n}\\n\\n.button-container button {\\n  padding: 2px 6px;\\n  background-color: #1677FF;\\n  border-radius: 4px;\\n  font-size: 12px;\\n  color: #fff;\\n  outline: none;\\n  border: none;\\n}","html":"<div id=\\"container\\">\\n  <div id=\\"k-line-chart\\" style=\\"height:430px\\">\\n</div>","js":"import { init } from 'klinecharts'\\nimport './index.css'\\n\\nfunction genData (timestamp = new Date().getTime(), length = 800) {\\n  let basePrice = 5000\\n  timestamp = Math.floor(timestamp / 1000 / 60) * 60 * 1000 - length * 60 * 1000\\n  const dataList = []\\n  for (let i = 0; i < length; i++) {\\n    const prices = []\\n    for (let j = 0; j < 4; j++) {\\n      prices.push(basePrice + Math.random() * 60 - 30)\\n    }\\n    prices.sort()\\n    const open = +(prices[Math.round(Math.random() * 3)].toFixed(2))\\n    const high = +(prices[3].toFixed(2))\\n    const low = +(prices[0].toFixed(2))\\n    const close = +(prices[Math.round(Math.random() * 3)].toFixed(2))\\n    const volume = Math.round(Math.random() * 100) + 10\\n    const turnover = (open + high + low + close) / 4 * volume\\n    dataList.push({ timestamp, open, high,low, close, volume, turnover })\\n\\n    basePrice = close\\n    timestamp += 60 * 1000\\n  }\\n  return dataList\\n}\\n\\nconst chart = init('k-line-chart')\\nchart.applyNewData(genData())\\n\\nfunction setType (type) {\\n  chart.setStyles({\\n    candle: { type }\\n  })\\n}\\n\\n// 以下仅仅是为了协助代码演示，在实际项目中根据情况进行调整。\\n// The following is only for the purpose of assisting in code demonstration, and adjustments will be made according to the actual situation in the project.\\nconst container = document.getElementById('container')\\nconst buttonContainer = document.createElement('div')\\nbuttonContainer.className = 'button-container'\\nconst items = [\\n  { key: 'candle_solid', text: '全实心-All solid' },\\n  { key: 'candle_stroke', text: '全空心-All stroke' },\\n  { key: 'candle_up_stroke', text: '涨空心-Up stroke' },\\n  { key: 'candle_down_stroke', text: '跌空心-Down stroke' },\\n  { key: 'ohlc', text: 'OHLC' },\\n  { key: 'area', text: '面积图-Area' }\\n]\\nitems.forEach(({ key, text }) => {\\n  const button = document.createElement('button')\\n  button.innerText = text\\n  button.addEventListener('click', () => { setType(key) })\\n  buttonContainer.appendChild(button)\\n})\\ncontainer.appendChild(buttonContainer)"}`),m={__name:"index",setup(l){const e=r(()=>c(()=>import("./Chart.DKtxStBt.js"),__vite__mapDeps([0,1]))),o=a();return(p,d)=>(s(),i(n(e),{js:n(t).js,html:n(t).html,css:n(t).css,title:n(o).title.value},null,8,["js","html","css","title"]))}};export{m as _};
