const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunks/Chart.DKtxStBt.js","assets/chunks/framework.Z8yrkugl.js"])))=>i.map(i=>d[i]);
import{u as a,o as i,b as r,k as n,U as s,V as c}from"./framework.Z8yrkugl.js";const t=JSON.parse(`{"css":".button-container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  align-items: center;\\n  gap: 8px;\\n  margin-top: 10px;\\n  padding: 10px 22px;\\n}\\n\\n.button-container button {\\n  padding: 2px 6px;\\n  background-color: #1677FF;\\n  border-radius: 4px;\\n  font-size: 12px;\\n  color: #fff;\\n  outline: none;\\n  border: none;\\n}","html":"<div id=\\"container\\">\\n  <div id=\\"k-line-chart\\" style=\\"height:430px\\">\\n</div>","js":"import { init, registerIndicator } from 'klinecharts'\\nimport './index.css'\\n\\nconst fruits = [\\n  '🍏', '🍎', '🍐', '🍊', '🍋', '🍌',\\n  '🍉', '🍇', '🍓', '🍈', '🍒', '🍑',\\n  '🍍', '🥥', '🥝', '🥭', '🥑', '🍏'\\n]\\n\\nregisterIndicator({\\n  name: 'Custom',\\n  figures: [\\n    { key: 'emoji' }\\n  ],\\n  calc: (kLineDataList) => {\\n    return kLineDataList.map(kLineData => ({ emoji: kLineData.close, text: fruits[Math.floor(Math.random() * 17)] }))\\n  },\\n  draw: ({\\n    ctx,\\n    barSpace,\\n    visibleRange,\\n    indicator,\\n    xAxis,\\n    yAxis\\n  }) => {\\n    const { from, to } = visibleRange\\n\\n    ctx.font = barSpace.gapBar + 'px' + ' Helvetica Neue'\\n    ctx.textAlign = 'center'\\n    const result = indicator.result\\n    for (let i = from; i < to; i++) {\\n      const data = result[i]\\n      const x = xAxis.convertToPixel(i)\\n      const y = yAxis.convertToPixel(data.emoji)\\n      ctx.fillText(data.text, x, y)\\n    }\\n    return false\\n  }\\n})\\n\\nfunction genData (timestamp = new Date().getTime(), length = 800) {\\n  let basePrice = 5000\\n  timestamp = Math.floor(timestamp / 1000 / 60) * 60 * 1000 - length * 60 * 1000\\n  const dataList = []\\n  for (let i = 0; i < length; i++) {\\n    const prices = []\\n    for (let j = 0; j < 4; j++) {\\n      prices.push(basePrice + Math.random() * 60 - 30)\\n    }\\n    prices.sort()\\n    const open = +(prices[Math.round(Math.random() * 3)].toFixed(2))\\n    const high = +(prices[3].toFixed(2))\\n    const low = +(prices[0].toFixed(2))\\n    const close = +(prices[Math.round(Math.random() * 3)].toFixed(2))\\n    const volume = Math.round(Math.random() * 100) + 10\\n    const turnover = (open + high + low + close) / 4 * volume\\n    dataList.push({ timestamp, open, high,low, close, volume, turnover })\\n\\n    basePrice = close\\n    timestamp += 60 * 1000\\n  }\\n  return dataList\\n}\\n\\nconst chart = init('k-line-chart')\\nchart.applyNewData(genData())\\n\\nfunction setMainIndicator(name) {\\n  chart.createIndicator(name, true, { id: 'candle_pane' })\\n}\\n\\nfunction setSubIndicator(name) {\\n  chart.createIndicator(name)\\n}\\n\\n\\n// 以下仅仅是为了协助代码演示，在实际项目中根据情况进行调整。\\n// The following is only for the purpose of assisting in code demonstration, and adjustments will be made according to the actual situation in the project.\\nconst container = document.getElementById('container')\\nconst buttonContainer = document.createElement('div')\\nbuttonContainer.className = 'button-container'\\n\\nconst mainIndicators = ['MA', 'BOLL', 'Custom']\\nconst subIndicators = ['VOL', 'MACD', 'Custom']\\n\\nconst mainTitle = document.createElement('span')\\nmainTitle.innerText = '主图指标-Main indicator: '\\nbuttonContainer.appendChild(mainTitle)\\nmainIndicators.forEach((name) => {\\n  const button = document.createElement('button')\\n  button.innerText = name\\n  button.addEventListener('click', () => { setMainIndicator(name) })\\n  buttonContainer.appendChild(button)\\n})\\n\\nconst subTitle = document.createElement('span')\\nsubTitle.style.paddingLeft = '16px'\\nsubTitle.innerText = '副图指标-Sub indicator: '\\nbuttonContainer.appendChild(subTitle)\\nsubIndicators.forEach((name) => {\\n  const button = document.createElement('button')\\n  button.innerText = name\\n  button.addEventListener('click', () => { setSubIndicator(name) })\\n  buttonContainer.appendChild(button)\\n})\\n\\ncontainer.appendChild(buttonContainer)"}`),p={__name:"index",setup(d){const e=s(()=>c(()=>import("./Chart.DKtxStBt.js"),__vite__mapDeps([0,1]))),{title:o}=a();return(l,u)=>(i(),r(n(e),{js:n(t).js,html:n(t).html,css:n(t).css,title:n(o)},null,8,["js","html","css","title"]))}};export{p as _};
